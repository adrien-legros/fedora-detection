apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: push-to-edge
  namespace: ci-cd
spec:
  params:
    - name: MODEL_VERSION
      type: string
      default: 
    - name: BUCKET_NAME
      type: string
      default: fedora
    - default: 'http//minio-pipelines-definition.fedora-detection:9000'
      name: S3_ENDPOINT_URL
      type: string
    - default: 'http://gitea-http.ci-cd:3000/data-scientist-1/fedora-detection'
      name: git_repository_url
      type: string
    - default: http://image-registry.openshift-image-registry:5000/ci-cd/edge-detection
      name: target_image_url
      type: string
      description: 'Image name w/o tag, MODEL_VERSION is used for the tag.'
  resources: []
  workspaces:
    - name: init-container-build-space
  tasks:
    - name: git-clone
      params:
        - name: url
          value: $(params.git_repository_url)
        - name: revision
          value: main
        - name: submodules
          value: 'true'
        - name: depth
          value: '1'
        - name: sslVerify
          value: 'true'
        - name: deleteExisting
          value: 'true'
        - name: verbose
          value: 'true'
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: init-container-build-space
    - name: download-model
      params:
        - name: SCRIPT
          value: |-
            set -x
            aws configure list
            aws s3 --no-verify-ssl cp $1 $2 --endpoint-url $3
        - name: ARGS
          value:
            - 's3://$(params.BUCKET_NAME)/$(params.MODEL_VERSION)/model.data'
            - /workspace/source/container-images/model-container/model.data
            - $(params.S3_ENDPOINT_URL)
      runAfter:
        - git-clone
      taskSpec:
        params:
          - default: aws $@
            description: The AWS script to run
            name: SCRIPT
            type: string
          - default:
              - help
            description: AWS cli arguments to be passed
            name: ARGS
            type: array
        steps:
          - args:
              - $(params.ARGS)
            image: 'quay.io/rbo/ubi-awscli:latest'
            name: awscli
            volumeMounts:
              - name: aws-credentials
                mountPath: /aws/
            resources: {}
            env:
              - name: AWS_SHARED_CREDENTIALS_FILE
                value: /aws/credentials
            script: $(params.SCRIPT)
        volumes:
          - name: aws-credentials
            secret:
              secretName: aws-credentials
        workspaces:
          - name: source
      workspaces:
        - name: source
          workspace: init-container-build-space
    - name: build-and-push-to-edge
      params:
        - name: IMAGE
          value: '$(params.target_image_url):$(params.MODEL_VERSION)'
        - name: BUILDER_IMAGE
          value: >-
            registry.redhat.io/rhel8/buildah@sha256:23fb7971ea6ac4aaaaa1139473a602df0df19222a3b5a76b551b2b9ddd92e927
        - name: STORAGE_DRIVER
          value: vfs
        - name: DOCKERFILE
          value: /workspace/source/container-images/model-container/Containerfile
        - name: CONTEXT
          value: /workspace/source/container-images/model-container/
        - name: TLSVERIFY
          value: 'false'
        - name: FORMAT
          value: oci
        - name: BUILD_EXTRA_ARGS
          value: '--platform linux/arm64/v8'
      runAfter:
        - download-model
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: init-container-build-space
  finally: []
